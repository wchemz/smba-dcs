---
## SMBA and DCS application stack
## Main Stack which creates KMS, S3 bucket, Lambda function, SNS, SES and Aurora PostgreSQL Cluster
##

AWSTemplateFormatVersion: "2010-09-09"
Description: "smba-dcs application stack template"

Parameters:
  TemplateName:
    Type: String
    Description: Name used for different elements created.
    Default: 'application'
  SMBALambdaSubnet1:
    Type: String
    Description: SMBA Lambda Subnet 1
  SMBALambdaSubnet2:
    Type: String
    Description: SMBA Lambda Subnet 2
  DCSLambdaSubnet1:
    Type: String
    Description: DCS Lambda Subnet 1
  DCSLambdaSubnet2:
    Type: String
    Description: DCS Lambda Subnet 1
  MainVPC:
    Type: AWS::EC2::VPC::Id
    Description: Main VPC id
  SMBAlambdaSG:
    Type: String
    Description: SMBA lambda SG
  DCSlambdaSG:
    Type: String
    Description: DCS lambda SG

Resources:
  # KMS S3 encryption key
  S3KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-s3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow S3 to use the Key
            Effect: Allow
            Principal:
              Service:
                - s3.us-east-1.amazonaws.com
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: '*'
  s3KeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/SMBA-S3-KEY
      TargetKeyId:
        Ref: S3KMSKey

  SMBASourceS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [ !Ref AWS::AccountId, !Ref "AWS::Region", "smba-source-bucket"] ]  
      LoggingConfiguration:
        DestinationBucketName: !Ref SMBAAccessLogS3Bucket
        LogFilePrefix: "source-access"
      AccessControl: "LogDeliveryWrite"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID:
                Ref: "S3KMSKey"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  SMBATargetS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [ !Ref AWS::AccountId, !Ref "AWS::Region", "smba-tarket-bucket"] ]  
      LoggingConfiguration:
        DestinationBucketName: !Ref SMBAAccessLogS3Bucket
        LogFilePrefix: "target-access"
      AccessControl: "LogDeliveryWrite"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID:
                Ref: "S3KMSKey"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  SMBAAccessLogS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [ !Ref AWS::AccountId, !Ref "AWS::Region", "smba-accesslog-bucket"] ]  
      LoggingConfiguration: {}
      AccessControl: "Private"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID:
                Ref: "S3KMSKey"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  #TODO
  SMBAETLLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "ETL Lambda"
      FunctionName: "SMBAETLLambdaFunction"
      Role: !GetAtt 'SMBAETLLambdaFunctionRole.Arn'
      PackageType: "Zip"
      Runtime: "python3.8"
      Handler: "index.lambda_handler"
      MemorySize: 128
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref SMBAlambdaSG
        SubnetIds:
          - !Ref SMBALambdaSubnet1
          - !Ref SMBALambdaSubnet2
      Code:
        ZipFile: |
          import os
          from os import walk
          import base64
          import math

          def lambda_handler(event, context):
              # get operation type
              try:
                  operation_type = event['operation']
              except KeyError:
                  raise Exception('Missing required parameter in event: "operation"')
  
  SMBAETLLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SMBAETLLambdaFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SMBAETLLambdaFunctionRole-Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
        - PolicyName: SMBAETLLambdaFunctionRole-KMS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - kms:DescribeKey
                  - kms:TagResource
                  - kms:PutKeyPolicy
                  - kms:GetKeyRotationStatus
                  - kms:EnableKeyRotation
                Resource:
                  - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
              - Effect: "Allow"
                Action:
                  - kms:CreateKey
                  - kms:ListAliases
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - kms:CreateAlias
                Resource:
                  - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/*
                  - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
        - PolicyName: SMBAETLLambdaFunctionRole-S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SMBASourceS3Bucket}/*
              - Effect: "Allow"
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SMBATargetS3Bucket}/*
        - PolicyName: SMBAETLLambdaFunctionRole-SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                  - ssm:GetParametersByPath
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: '*' # The APIs above only support '*' resource.
        - PolicyName: SMBAETLLambdaFunctionRole-VPC
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"
Metadata: {}
Conditions: {}
